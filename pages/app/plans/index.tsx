import Head from "next/head";
import { useContext, useState, useEffect } from "react"
import React from "react";
import PageLayout from "@/components/app/PageLayout";
//import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { GetServerSideProps } from 'next';
//import { translateOrDefault } from "@/utils/i18nUtils";
import { AuthContext } from "@/context/AuthContext";
import { FlexColCentered, FlexRowContainer, H1 } from "@/components/shared/styled-global-components";
import { TierCard } from "@/components/shared/Cards";
import { getSubTiers } from "@/requests/profile";
import { LoadingContext } from "@/context/LoadingContext";
import Cookies from "js-cookie";


interface SubscriptionTier {
    categories_limit: number;
    character_limit: number;
    created_at: string;
    id: string;
    name: string;
    templates_limit: number;
}


const Page = () => {
    //const { t } = useTranslation("common");
    const { isAuthenticated } = useContext(AuthContext)
    const [subTiers, setSubTiers] = useState<SubscriptionTier[] | null>(null)
    const { setIsLoading } = useContext(LoadingContext)
    const userID = Cookies.get("user_id")
    const subTierId = Cookies.get("sub_tier_id")

    useEffect(() => {
        const setStates = async () => {
            setIsLoading(true)
            const tiers = await getSubTiers()
            if (tiers) {
                setSubTiers(tiers)
            }
        }
        if (userID) {
            setStates()
        }
        setIsLoading(false)
    }, [userID, setIsLoading])

    return (
        <>
            <Head>
                <title>Pricing plans</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <PageLayout authenticated={isAuthenticated}>
                <FlexColCentered className="h-full p-4">
                    <FlexColCentered className="w-full max-w-[550px] gap-8">
                        <H1>Subscription plans</H1>
                        <i className="text-center">The templify app is currently in beta and PRO subscriptions will be available upon launch</i>
                        <FlexRowContainer className="gap-4 justify-between w-full">
                            {subTiers && subTierId &&
                                subTiers.map((tier) => {
                                    return <div key={"card-" + tier.id}>
                                        <TierCard subTier={tier} subTierId={subTierId} />
                                    </div>
                                })
                            }
                        </FlexRowContainer>
                    </FlexColCentered>

                </FlexColCentered>
            </PageLayout >
        </>
    );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
    return {
        props: {
            ...(await serverSideTranslations(context.locale as string, ["common"]))
        }
    }
}
export default Page;
