import Head from "next/head";
import React, { useState } from "react";
import PageLayout from "@/components/PageLayout";
import { FlexColCentered, FlexColContainer, FlexColRowContainer, FlexRowCenteredY, H1 } from "@/components/styled-global-components";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { GetServerSideProps } from 'next';
import { translateOrDefault } from "@/utils/i18nUtils";
import { BsX } from "react-icons/bs";
import tw from "tailwind-styled-components";
import { FaCheck, FaCopy, FaEdit } from "react-icons/fa";
import { CardBaseLight } from "@/components/styled-global-components";


export default function Page() {
  const { t } = useTranslation("common");
  return (
    <>
      <Head>
        <title>Templates</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <FlexColContainer className="min-h-full gap-8">
          <H1>{translateOrDefault(t, "pages.templates.heading", "Templates")}</H1>
          <FlexColRowContainer className="flex-wrap gap-4">
            <TemplateCard />
          </FlexColRowContainer>
        </FlexColContainer>
      </PageLayout>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ locale }) => {
  return {
    props: {
      ...(await serverSideTranslations(locale as string, ["common"])),
    },
  };
};

const CardInput = tw.input`
  border-0 
  rounded 
  bg-slate-50
  col-span-full 
  sm:col-span-1
  dark:bg-gray-800
`
/*
const CardTextArea = tw.textarea`
  border-0 
  rounded 
  bg-slate-50
  dark:bg-gray-800
  min-h-[15rem]
`
*/
const IconContainer = tw(FlexColCentered)`
  p-1 
  rounded 
  text-xl 
  cursor-pointer 
  hover:bg-slate-200
  dark:hover:bg-slate-500
`

const testString = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin congue vitae ex vel cursus. Sed nec sem dictum, luctus dui vel, maximus lorem. Phasellus at bibendum purus. Vestibulum tempor in diam pulvinar dictum. In gravida tincidunt imperdiet. Morbi varius, nulla at bibendum ultricies, massa ipsum sagittis neque, vitae congue urna. "

const TemplateCard = () => {
  const [textTemplate, setTextTemplate] = useState<string>(testString);
  const [isEditActive, setIsEditActive] = useState<boolean>(false);
  const [inputValues, setInputValues] = useState<Record<string, string | undefined>>({});
  const [hasBeenCopied, setHasBeenCopied] = useState<boolean>(false);
  const [focusedInput, setFocusedInput] = useState<number | null>(null);

  const handleEditActive = () => {
    setIsEditActive(!isEditActive);
    setInputValues({});
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setTextTemplate(e.target.value);
  };


  const handleInputChange = (index: number, event: React.ChangeEvent<HTMLInputElement>) => {
    setInputValues({
      ...inputValues,
      [index]: event.target.value,
    });
  };

  const handleCopy = () => {
    let finalText = textTemplate;
    Object.keys(inputValues).forEach(key => {
      finalText = finalText.replace('#', inputValues[key] || '');
    });

    navigator.clipboard.writeText(finalText)
      .then(() => {
        setHasBeenCopied(true);
        setTimeout(() => setHasBeenCopied(false), 2000);
      })
      .catch(err => console.log('Something went wrong', err));
  };

  let placeholderCount = 0; // this variable will track the number of placeholders encountered
  const regex = /#|\b\w+\b/g;
  const placeholders = textTemplate.match(regex)?.map((word, index) => {
    if (word === '#') {
      const count = placeholderCount; // save the current placeholder count to use in the handler function
      placeholderCount += 1;
      return (
        <CardInput
          key={index}
          type="text"
          placeholder={"Placeholder " + index}
          value={inputValues[count] || ''}
          id={"input-" + count}
          onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleInputChange(count, event)}
          onFocus={() => setFocusedInput(count)}
          onBlur={() => setFocusedInput(null)}
          disabled={isEditActive}
          className={`${isEditActive && "bg-gray-300 cursor-not-allowed"}`}
        />
      );
    }
  });


  const displayText = textTemplate.split("#").map((segment, index) => {
    if (index < textTemplate.split("#").length - 1) {
      return (
        <span key={index}>
          {segment}
          <label
            htmlFor={"input-" + index}
            className={`bg-green-100 cursor-pointer ${index === focusedInput && 'bg-green-300'} dark:bg-green-600 dark:hover:bg-green-900`}
          >
            {inputValues[index] || '{...}'}
          </label>
        </span>
      );
    } else {
      return <span key={index}>{segment}</span>;
    }
  });
  return (
    <>
      <CardBaseLight>
        <FlexColContainer className="min-h-[15rem] max w-full lg:w-[35rem] p-4 gap-4">
          <FlexRowCenteredY className="justify-between gap-4">
            <input type="text" defaultValue="New card" className="border-0 rounded text-2xl bg-transparent" />
            <IconContainer>
              <BsX className="stroke-4" />
            </IconContainer>
          </FlexRowCenteredY>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {placeholders}
          </div>
          {isEditActive
            ?
            <textarea className=" border-0 rounded bg-slate-50 dark:bg-gray-800 min-h-[15rem]" defaultValue={textTemplate} onChange={handleTextChange} />
            : <pre className="font-sans" style={{
              whiteSpace: "pre-wrap",
              wordWrap: "break-word"
            }}>{displayText}</pre>
          }
          <FlexRowCenteredY className="justify-end gap-4">
            <IconContainer onClick={handleEditActive}>
              {!isEditActive ? <FaEdit /> : <FaCheck />}
            </IconContainer>
            {!isEditActive &&
              <IconContainer onClick={handleCopy}>
                {!hasBeenCopied ? <FaCopy /> : <FaCheck />}
              </IconContainer>}
          </FlexRowCenteredY>
        </FlexColContainer>
      </CardBaseLight>
    </>
  );
};

